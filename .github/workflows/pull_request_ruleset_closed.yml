name: Pull Request Ruleset (Closed)
permissions:
  contents: write
  actions: write

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  update-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine version type
        id: determine_version
        run: |
          REQUIRED_LABELS=("major" "minor" "patch")
          VERSION_TYPE=""

          LABELS=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[].name')
          echo "Debugging : Extracted labels"
          for label in "$LABELS"; do
            echo "ã„´ $label"
          done
          
          for label in "${REQUIRED_LABELS[@]}"; do
            if echo "$LABELS" | grep -qw "$label"; then
              VERSION_TYPE=$label
              break
            fi
          done
          
          if [[ -z "$VERSION_TYPE" ]]; then
            echo "Error: Pull request must have one of the following labels: major, minor, patch"
            exit 1
          fi
          
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV

      - name: Update package.json version
        run: |
          echo "${{ github.event.pull_request.body }}" | sed '1{/^---$/d}; /^---$/,$d' > CHANGELOG_UPDATE.md
          
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          
          npm run update_version:${{ env.VERSION_TYPE }} CHANGELOG_UPDATE.md
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit updated package.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          got add CHANGELOG.md
          git add src/manifest.json
          echo "chore: update ${{ env.VERSION_TYPE }} version (${{ env.CURRENT_VERSION }} -> ${{ env.NEW_VERSION }}) \n\n$(cat CHANGELOG_UPDATE.md)" > commit_message.txt
          git commit -F commit_message.txt
          git tag ${{ env.NEW_VERSION }}
          git push origin HEAD:master
          git push origin --tags